 <svg xmlns="http://www.w3.org/2000/svg" width="750" height="1050" style="background-color:black">
    <!-- Global Styles -->
    <filter id="shadow" x="-150%" y="-150%" width="300%" height="300%">
        <feFlood flood-color="black" result="color" />
        <feGaussianBlur in="SourceAlpha" stdDeviation="4" />
        <feComposite in2="SourceGraphic" operator="over" />
    </filter>
    <filter id="blur" x="-150%" y="-150%" width="300%" height="300%">
        <feGaussianBlur in="SourceAlpha" stdDeviation="12" />
    </filter>
    <!-- Definitions -->
    <defs>
        <!-- Gradients -->
        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color: {{(card) => {
                if(card.Realms.length == 0) return;
                
                if(card.Realms.includes('Divine')) {
                    return '#FCE79C';
                } else if(card.Realms.includes('Elemental')) {
                    return '#FF7344';
                } else if(card.Realms.includes('Mortal')) {
                    return '#287CC4';
                } else if(card.Realms.includes('Nature')) {
                    return '#408C2F';
                } else if(card.Realms.includes('Void')) {
                    return '#3B2055';
                }
            }}}" />
            <stop offset="100%" style="stop-color: {{(card) => {
                if(card.Realms.length == 0) return;
                
                if(card.Realms.includes('Void')) {
                    return '#3B2055';
                } else if(card.Realms.includes('Nature')) {
                    return '#408C2F';
                } else if(card.Realms.includes('Mortal')) {
                    return '#287CC4';
                } else if(card.Realms.includes('Elemental')) {
                    return '#FF7344';
                } else if(card.Realms.includes('Divine')) {
                    return '#FCE79C';
                }
            }}}" />
        </linearGradient>
        
        <!-- Define the image filter -->
        <rect id="complete-gradient" x="-150" y="0" width="1050" height="1050" fill="url(#gradient)" />
        <filter id="overlayFilter">
          <feImage xlink:href="#complete-gradient" result="gradient" />

          <!-- Apply the blend mode to overlay the gradient with the image -->
          <feBlend mode="hue" in="gradient" in2="SourceGraphic" result="blended-gradient"/>
          <feColorMatrix type="saturate" in="blended-gradient" values="0.6"/>
          <!--<feComponentTransfer>
               <feFuncR type="linear" intercept="-0.05" slope="1"/>
               <feFuncG type="linear" intercept="-0.05" slope="1"/>
               <feFuncB type="linear" intercept="-0.05" slope="1"/>
           </feComponentTransfer>-->
        </filter>
        
        <linearGradient id="fadeGrad" y2="1" x1="0" x2="0" y1="0">
          <stop offset="0" stop-color="black"/>
          <stop offset="0.25" stop-color="white"/>
        </linearGradient>
        
        <mask id="fade" maskContentUnits="objectBoundingBox">
          <rect width="1" height="1" fill="url(#fadeGrad)"/>
        </mask>
        
        <!-- Shapes -->        
        <clipPath id="bottomtriangle">
            <polygon points="0,1050 0,500 35,500 35,970 715,970 715,500 750,500 750,1050" />
        </clipPath>
        
        <clipPath id="inborderLeft">
            <polygon points="0,0 0,1050 35,1050 35,45 715,45 715,1050 750,1050 750,0" />
        </clipPath>
    </defs>
    
    <!-- Artwork -->
    <image x="-150" y="0" width="1050" height="1050" preserveAspectRatio="xMidYMin slice" href="{{(card) => card.Artwork}}"/>
    
    <!-- In-Border-Texture -->
    <image x="0" y="0" width="750" height="1050" preserveAspectRatio="xMidYMin slice" href="{{(templates, card, explanations) => {
        const textureToRender = Object.keys(explanations)
            .filter((key) => card.Text.includes(key.replaceAll('_', ' ')))
            .find((key) => templates.has(`${key}.png`));
        
        return templates.get((textureToRender ?? 'Ruin2') + '.png');
    }}}"
        clip-path="url(#inborderLeft)"
        filter="url(#overlayFilter)"
    />
      
    <!-- Triangles bottom border -->
    <image x="0" y="600" width="750" height="750" href="{{(templates, card) => templates.get(`Texture_Galaxy_${(card.RandomValue % 4) + 1}.png`)}}" clip-path="url(#bottomtriangle)" mask="url(#fade)"/>
    
    <!-- Subtle Inner Card Layout border -->
    <rect x="37" y="135" width="676" height="834" fill="none" stroke="black" stroke-width="4" />
    
    <!-- Textbox w/ Name of the Card -->
    <image x="35" y="40" width="680" height="90" opacity = "0.50" preserveAspectRatio="xMaxYMid slice" href="{{(templates, card) => templates.get(`Texture_Galaxy_${(card.RandomValue % 4) + 1}.png`)}}" />
    <rect x="35" y="40" width="680" height="90" fill="none" stroke="black" stroke-width="16" />
    <rect x="35" y="40" width="680" height="90" fill="none" stroke="url(#gradient)" stroke-width="10" />
    
    <!-- Card Name -->
    <foreignObject 
        x="0" 
        y="34" 
        width="750" 
        height="100"
    >
        <div xmlns="http://www.w3.org/1999/xhtml">
            <div style="color:white;font-family:'EUR42';font-size:80px;stroke:black;transform:scale({{(card) => {
                const length = card.Name.length;
                
                if(length < 19) return 1;
                
                console.log('Transform is', 15 / length);
                
                return 1 - 0.09 * (length-19);
            }}},1)">
                <center>{{(card) => card.Name}}</center>
            </div>
        </div>
    </foreignObject>
    
    <rect x="-15" y="675" opacity="0.52" width="800" height="400" fill="black"/>
    
    <!-- Center Banner -->
    <image x="35" y="580" width="680" height="100" opacity="0.7" preserveAspectRatio="xMaxYMid slice" href="{{(templates, card) => templates.get(`Texture_Galaxy_${(card.RandomValue % 4) + 1}.png`)}}#" />
    <rect x="35" y="580" width="680" height="100" fill="none" stroke="black" stroke-width="16" />
    <rect x="35" y="580" width="680" height="100" fill="none" stroke="url(#gradient)" stroke-width="10" />

    <!-- Type -->
    <foreignObject 
        x="50" 
        y="588" 
        width="655" 
        height="255"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" x="50">
            <div style="color:white;font-family:'Palatino Linotype', serif;stroke-width:3;font-size:38px;line-height:40px">
            {{(card) => card.Types.map(str => `${str.trim()}<br/>`).join('')}}
            </div>
        </div>
    </foreignObject>
	
	<!-- Realm Text -->
    <foreignObject 
        x="500" 
        y="588" 
        width="200" 
        height="255"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" x="60">
            <div style="color:white;font-family:'Palatino Linotype', serif;stroke-width:2;font-size:38px;line-height:40px;text-align:right">
            {{(card) => card.Realms.join('<br/>')}}
            </div>
        </div>
    </foreignObject>
    
    <!-- Rarity Gem Shadow -->
    <!--<image x="205" y="445" width="340" height="340" preserveAspectRatio="xMidYMid" filter="url(#shadow)" href="{{(card, templates) => templates.get(`NEUrarity_${card.Rarity}.png`)}}" />
    -->
    
    <!-- Text of Textbox -->
    <foreignObject 
            x="46" 
            y="678" 
            width="656" 
            height="253"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" style="color:white;font-family:'Palatino Linotype', serif;font-size:32px;display:inline;line-height:36px">
            <p>
                {{(card) => {
                    if(card.Keyword.length == 0) {
                        return '';
                    } else {
                        return `<center><b>${card.Keyword.join('. ')}.</b></center>`;
                    }
                }}}
                {{(card, explanations, templates) => {
                    if(card.Text.length == 0) {
                        return '';
                    } else {
                        let effect = card.Text;
                        
                        //make choose-one effects with dashes ("-") have a separate linebreak for each
                        let chooseOneTexts = effect.match(new RegExp(`-\s[^-]+`, 'mg')) ?? [];
                        chooseOneTexts.forEach((chooseOneText) => effect = effect.replaceAll(chooseOneText, `<br/>${chooseOneText}`));
                        
                        //make a linebreak after every "mechanic":"..."
                        let mechanics = effect.match(new RegExp(`(?!^.)[A-Z][^:\\.]+:`, 'g')) ?? [];
                        
                        effect = effect.replaceAll('<D>', `<img width="45" height="45" style="padding-bottom:5px;vertical-align:middle;filter: saturate(70%) brightness(0.95) hue-rotate(-60deg)" src="${templates.get('Crystal_gruen.png')}" />`);
						effect = effect.replaceAll('<E>', `<img width="45" height="45" style="padding-bottom:5px;vertical-align:middle;filter: hue-rotate(260deg) brightness(1.1) saturate(90%)" src="${templates.get('Crystal_gruen.png')}" />`);
						effect = effect.replaceAll('<V>', `<img width="45" height="45" style="padding-bottom:5px;vertical-align:middle;filter: saturate(70%) brightness(80%) hue-rotate(172deg)" src="${templates.get('Crystal_gruen.png')}" />`);
						effect = effect.replaceAll('<M>', `<img width="45" height="45" style="padding-bottom:5px;vertical-align:middle;filter: saturate(70%) brightness(90%) hue-rotate(100deg)" src="${templates.get('Crystal_gruen.png')}" />`);
						effect = effect.replaceAll('<N>', `<img width="45" height="45" style="padding-bottom:5px;vertical-align:middle;filter: hue-rotate(20deg) saturate(90%)" src="${templates.get('Crystal_gruen.png')}" />`);     
                        
                        mechanics.forEach((mechanic) => {
                            effect = effect.replace(mechanic, `<br/>${mechanic}`);
                        });                   
                        
                        //give color highlights to Mechanics
                        Object.entries(explanations).forEach(([key, value]) => {
                            key = key.replaceAll('_', ' ');
                            if(key.length == 0) return;
                            
                            if(effect.length > 0 && effect.includes(key)) {
                                let keyword = effect.match(new RegExp(`${key}\\S*`, 'i'));
                                effect = effect.replaceAll(keyword, `<b>${keyword}</b>`);
                            }
                        });
                        return effect;
                    }
                }}}
                {{(card, explanations) => {
                    //inject keyword highlights and add flavor text on commons
                    let explanation = '';
                    
                    if(card.Rarity === 'Common') {
                        Object.entries(explanations).forEach(([key, value]) => {
                            key = key.replaceAll('_', ' ');
                            if(key.length == 0 || value == null) return;
                            
                            if((card.Text.length > 0 && card.Text.includes(key)) 
                            || (card.Keyword.length > 0 && card.Keyword.includes(key))) {
                                if(typeof value === 'function') {
                                    let parameter = (card.Text + ' ' + card.Keyword).match(new RegExp(`(?<=${key}) [^:]+`, 'i'));
                                    let parameterv2 = (card.Text + ' ' + card.Keyword).match(new RegExp(`(?<=${key}: )[^\\.]+`, 'i'));          
                                    
                                    explanation = value(parameter || parameterv2);
                                } else {
                                    explanation = value;
                                }
                            }
                        });
                    }
                    
                    if(explanation.length > 0) explanation = `<i style="font-size:28px;opacity:0.6;margin-top:-6px">(${explanation})</i>`;
                    
                    return explanation;
                }}}
            </p>
        </div>
    </foreignObject>
    
    <!-- Flavortext -->
    <foreignObject 
            x="46" 
            y="820" 
            width="656" 
            height="140"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" style="text-align:center;width:100%;opacity:0.65;position:absolute;bottom:10px;color:white;font-family:'Palatino Linotype', serif;font-size:26px;line-height:32px">
            {{(card) => {
                if(card.Flavortext.length == 0) {
                    return '';
                } else {
                    return `<i>&#8222;${card.Flavortext}&#8220;</i>`;
                }
            }}}
        </div>
    </foreignObject>
                
    <!-- Rarity Gem behind Power -->
    <image x="250" y="482" width="280" height="280" preserveAspectRatio="xMidYMid" href="{{(card, templates) => templates.get(`NEUrarity_${card.Rarity}.png`)}}" />

    <!-- Power -->
    <text x="52%" y="685" font-size="190" text-anchor="middle">
        <tspan stroke="black" stroke-width="6" font-family="Palatino Linotype" font-weight="bold" fill="white">{{(card) => card.Power}}</tspan>
    </text>
    
    <!-- Crystals -->
        if(card.Costs.length == 0) return '';
        
    {{(card, templates) => {
        const numberQuestionMarks = card.Costs.filter((cost) => cost === '?').length;
        const arrangedCosts = card.Costs.filter((cost) => cost !== '?').reverse();
        for(let i=0;i < numberQuestionMarks; i++) arrangedCosts.push('?');
        
        return arrangedCosts.map((crystal, index) => {
            let filter = '';
            
            switch(crystal.trim().toLowerCase()) {
                case 'd':
                    filter = 'saturate(70%) brightness(0.95) hue-rotate(-60deg)';
                    break;
                case 'e':
                    filter = 'hue-rotate(260deg) brightness(1.1) saturate(90%)';
                    break;
                case 'm':
                    filter = 'saturate(70%) brightness(90%) hue-rotate(100deg)';
                    break;
                case 'n':
                    filter = 'hue-rotate(20deg) saturate(90%)';
                    break;
                case 'v':   
                    filter = 'saturate(70%) brightness(80%) hue-rotate(172deg)';
                    break;
                default:
                    filter = 'grayscale(1)';
                    break;
            }
            
            return `
            <image x="${715-(index+1)*60}" y="972" width="60" height="60" filter="url(#shadow)" preserveAspectRatio="xMidYMid" href="${templates.get('Crystal_gruen.png')}"/>
            <image x="${715-(index+1)*60}" y="972" width="60" height="60" style="filter: ${filter};" preserveAspectRatio="xMidYMid" href="${templates.get('Crystal_gruen.png')}"/>
            `;
        })
        .join('');
    }
    }}
    
    <!-- Copyright + Set Name-->
    <foreignObject 
        x="45" 
        y="975" 
        width="655" 
        height="255"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" x="50">
            <div style="color:white;font-size:20px;font-weight:lighter;opacity:0.5">
                <b>Beyond</b> Set {{(set) => set}} {{(card) => {
                        if(card.CardID === 0) return '';
                        
                        return ` #${card.CardID}`;
                    }
                    }}<br/>
                &#169; Nonbiri Studios {{() => {return new Date().getFullYear();}}}
            </div>
        </div>
    </foreignObject>
    
    <!-- Black Border + Bleed -->
    <rect x="0" y="0" width="750" height="1050" fill="none" stroke="black" stroke-width="35" rx="35"/>
</svg>