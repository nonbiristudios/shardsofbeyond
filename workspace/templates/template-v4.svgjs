 <svg xmlns="http://www.w3.org/2000/svg" width="750" height="1050" style="background-color:black">
    <!-- Preprocessing -->
    {{(card) => {
        card.Realms = (card.Realms ?? '')
            .trim()
            .replaceAll('Realm_', '')
            .split(' ')
            .filter((realm) => realm != '');
        card.Types = (card.Types ?? '')
            .trim()
            .replaceAll(',', '')
            .replaceAll('?', '')
            .split(' ')
            .filter((type) => type != '');
        card.Keyword = (card.Keyword ?? '')
            .trim()
            .replaceAll('\.', '')
            .split(' ')
            .filter((keyword) => keyword != '');
        card.Costs = (card.Costs ?? '')
            .trim()
            .replaceAll(' ', '')
            .split(',')
            .filter((cost) => cost != '');
            
        card.RandomValue = [...card.Name]
            .map((character) => character.charCodeAt(0) + 3)
            .reduce((prev, current) => ((prev * current) % 100001), 2);
        
        return '';
    }}};
    
    {{(card) => {
        card.RarityColor = {
            Common: '#75491c',
            Uncommon: 'silver',
            Rare: '#dbb535',
            Terrain: 'black'
        }[card.Rarity];
        
        return '';
    }}}
 
    <!-- Filters -->
    <filter id="shadow" x="-150%" y="-150%" width="300%" height="300%">
        <feFlood flood-color="black" result="color" />
        <feGaussianBlur in="SourceAlpha" stdDeviation="4" />
        <feComposite in2="SourceGraphic" operator="over" />
    </filter>
        <filter id="rarityShadow" x="-150%" y="-150%" width="300%" height="300%">
        <feFlood flood-color="{{(card) => card.RarityColor}}" result="color" />
        <feGaussianBlur in="SourceAlpha" stdDeviation="4" />
        <feComposite in2="SourceGraphic" operator="over" />
    </filter>
    <filter id="blur" x="-150%" y="-150%" width="300%" height="300%">
        <feGaussianBlur in="SourceGraphic" stdDeviation="2" />
    </filter>
      <filter id="sprayGalaxy">
        <feDiffuseLighting in="SourceGraphic" result="light" lighting-color="{{(card) => card.RarityColor}}">
          <feDistantLight azimuth="240" elevation="30" />
        </feDiffuseLighting>

        <feComposite
          in="SourceGraphic"
          in2="light"
          operator="arithmetic"
          k1="1"
          k2="0.4"
          k3="0"
          k4="0" />
      </filter>
    <!-- Definitions -->
    <defs>
        <!-- Gradients -->
        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="45%" style="stop-color: {{(card) => {
                if(card.Realms.length == 0) return '#666666';
                
                if(card.Realms.includes('Divine')) {
                    return '#FCE79C';
                } else if(card.Realms.includes('Elemental')) {
                    return '#FF7344';
                } else if(card.Realms.includes('Mortal')) {
                    return '#287CC4';
                } else if(card.Realms.includes('Nature')) {
                    return '#408C2F';
                } else if(card.Realms.includes('Void')) {
                    return '#300D51';
                }
            }}}" />
            <stop offset="55%" style="stop-color: {{(card) => {
                if(card.Realms.length == 0) return '#666666';
                
                if(card.Realms.includes('Void')) {
                    return '#300D51';
                } else if(card.Realms.includes('Nature')) {
                    return '#408C2F';
                } else if(card.Realms.includes('Mortal')) {
                    return '#287CC4';
                } else if(card.Realms.includes('Elemental')) {
                    return '#FF7344';
                } else if(card.Realms.includes('Divine')) {
                    return '#FCE79C';
                }
            }}}" />
        </linearGradient>
        
        <!-- Gradient Filter-->
        <rect id="complete-gradient" x="0" y="0" width="100%" height="100%" fill="url(#gradient)" />
        
        <filter id="overlayFilter">
          <feImage href="#complete-gradient" result="gradient" />          
          <feBlend in2="SourceGraphic" in="gradient" mode="hue" result="blend"/>
          
          <feComposite in="blended-gradient" in2="SourceAlpha" operator="atop"/>
          <feColorMatrix type="saturate" in="masked" values="0.9"/>
        </filter>
        
        <filter id="desaturate">
            <feColorMatrix type="saturate" in="SourceGraphic" out="desaturated" values="0.1"/>
            <feComponentTransfer>
                <feFuncR type="linear" slope="0.3" />
                <feFuncG type="linear" slope="0.3" />
                <feFuncB type="linear" slope="0.3" />
            </feComponentTransfer>
        </filter>
        
        <filter id="distort">
          <feTurbulence baseFrequency="0.0071 0.007" numOctaves="20" result="noise" seed="{{(card) => card.RandomValue}}"/>
          <feDisplacementMap in="SourceGraphic" in2="noise" scale="20" xChannelSelector="R" yChannelSelector="B"/>
        </filter>
        
        <linearGradient id="fadeGrad" y2="1" x1="0" x2="0" y1="0">
          <stop offset="0" stop-color="black"/>
          <stop offset="0.25" stop-color="white"/>
        </linearGradient>
        
        <mask id="fade" maskContentUnits="objectBoundingBox">
          <rect width="1" height="1" fill="url(#fadeGrad)"/>
        </mask>
        
        <!-- Shapes -->        
        <clipPath id="bottomtriangle">
            <polygon points="0,1050 0,500 35,500 35,962 715,962 715,500 750,500 750,1050" />
        </clipPath>
        
        <clipPath id="inborderLeft">
            <polygon points="0,0 0,1050 35,1050 35,35 715,35 715,1050 750,1050 750,0" />
        </clipPath>
    </defs>
    
    <!-- Artwork -->
    <image
        x="0"
        y="0"
        width="750"
        height="1050"
        preserveAspectRatio="xMidYMin slice"
        href="{{(card) => card.Artwork}}"
    />
    
    <!-- Opacity Filter over Textbox -->
    <rect
        visiblity="{{(card) => card.Type == 'Unit' ? 'visible' : 'hidden'}}"
        x="-15"
        y="675"
        opacity="0.52"
        width="800"
        height="400"
        fill="black"
    />
    
    <!-- In-Border-Texture -->
    <image
        x="0"
        y="0"
        width="750"
        height="1050"
        preserveAspectRatio="xMidYMin slice"
        href="{{(templates, card, explanations) => {
            let textureToRender = undefined;
            Object.keys(explanations)
                .filter((key) => card.Text.includes(key.replaceAll('_', ' ')))
                .find((key) => {
                    const possibleTemplates = [...templates.keys()]
                        .filter((template) => template.includes(key));
                        
                    if(possibleTemplates.length === 0) return false;
                    
                    textureToRender = possibleTemplates[card.RandomValue % possibleTemplates.length];
                    return true;
                    
                });       
                
            const defaultTexture = `Background.png`;
            
            return templates.get((textureToRender ?? defaultTexture));
        }}}"
        clip-path="url(#inborderLeft)"
        filter="url(#overlayFilter) saturate(30%)"
    />
      
    <!-- Triangles bottom border -->
    <image
        x="0"
        y="600"
        width="750"
        height="750"
        href="{{(templates, card) => templates.get(`Galaxy (${(card.RandomValue % 4) + 1}).png`)}}"
        clip-path="url(#bottomtriangle)"
        mask="url(#fade)"
        filter="url(#sprayGalaxy)"
    />
    
    <!-- Subtle Inner Card Layout border Glow -->
    <rect
        x="37"
        y="35"
        width="676"
        height="928"
        fill="none"
        stroke="{{(card) => card.RarityColor}}"
        stroke-width="4"
        filter="url(#blur)"
    />
    <!-- Subtle Inner Card Layout border -->
    <rect
        x="37"
        y="35"
        width="676"
        height="928"
        fill="none"
        stroke="{{(card) => card.RarityColor}}"
        stroke-width="4"
    />
    
    <!-- Textbox w/ Name of the Card -->
    <!-- Base Box -->
    <image
        x="-139"
        y="8"
        width="1028"
        height="145"
        href="{{(templates, card) => templates.get(`Banner_Top.png`)}}"
        filter="url(#desaturate) drop-shadow(2px 2px 0px black) drop-shadow(-2px 2px 0px black) drop-shadow(2px -2px 0px black) drop-shadow(-2px -2px 0px black)"
    />
    <!-- Border -->
    <image
        x="-139"
        y="8"
        width="1028"
        height="145"
        href="{{(templates, card) => templates.get(`Banner_Top_Border.png`)}}"
        filter="url(#overlayFilter) drop-shadow(0px 0px 2px black) drop-shadow(0px 0px 4px black)"
    />
    
    <!-- Card Name -->    
    <!-- Black name + smooth filter -->
    <text 
        x="50%" 
        y="112"
        {{(card) => card.Name.length > 15 ? 'textLength="598px"' : ''}}
        lengthAdjust="spacingAndGlyphs"
        fill="white"
        text-anchor="middle"
        style="letter-spacing: -4px;
            font-family: 'GRECOromanLubedJudo Medium';
            font-size:84px;
            text-shadow: 4px 4px 4px black;"
    >
        {{(card) => card.Name}}
    </text>
    
    <!-- Center Banner -->
    <!-- Base Box -->
    <image
        x="11"
        y="565"
        width="727"
        height="134"
        preserveAspectRatio="none"
        href="{{(templates, card) => templates.get(`Banner_Middle.png`)}}"
        filter="url(#desaturate) drop-shadow(2px 2px 0px black) drop-shadow(-2px 2px 0px black) drop-shadow(2px -2px 0px black) drop-shadow(-2px -2px 0px black)"
    />
    <!-- Border -->
    <image
        x="11"
        y="565"
        width="727"
        height="134"
        preserveAspectRatio="none"
        href="{{(templates, card) => templates.get(`Banner_Middle_Border.png`)}}"
        filter="url(#overlayFilter) drop-shadow(0px 0px 2px black) drop-shadow(0px 0px 4px black)"
    />

    <g visiblity="{{(card) => card.Type == 'Unit' ? 'visible' : 'hidden'}}">
        <!-- Type -->
        <text
            visiblity="{{(card) => card.Type == 'Unit' ? 'visible' : 'hidden'}}"
            x="125" 
            y="591" 
            width="655" 
            height="255"
            fill="white"
            style="
                font-family:'Palatino Linotype', serif;
                font-weight: bold;
                font-size:38px;
                line-height:40px;
                text-shadow: 2px 2px 4px black;
            "
        >
            {{(card) => {
                // Split all Types into the best combination of Line 1 and 2 (space-wise)
                const types = card.Types.map((typ) => typ.trim());
                
                const sortedTypes = types.sort((typ1, typ2) => typ1.length - typ2.length);
                
                let line1 = [];
                let line2 = [];
                
                sortedTypes.forEach((typ) => ((line1.length > line2.length) ? line2 : line1).push(typ));
                
                return `<tspan x="75" dy="37">${line1.join(' - ')}</tspan>` +
                    `<tspan x="75" dy="37">${line2.join(' - ')}</tspan>`;
            }}}
        </text>
        
        <!-- Realm Text -->
        <text 
            visiblity="{{(card) => card.Type == 'Unit' ? 'visible' : 'hidden'}}"
            x="465" 
            y="591"
            fill="white"
            style="font-family:'Palatino Linotype', serif;
                font-weight: bold;
                font-size: 38px;
                line-height: 40px;"
        >
            {{(card) => {
                const colors = {
                    'Divine': '#FCE79C',
                    'Elemental': '#FF7344',
                    'Mortal': '#287CC4',
                    'Nature': '#408C2F',
                    'Void': '#3B2055'
                };
                
                return card.Realms
                    .map((realm) => `<tspan x="465" dy="37" style="text-shadow: 2px 2px 4px ${colors[realm]};">${realm}</tspan>`)
                    .join('');
            }}}
        </text>
    </g>
    
    <!-- Text of Textbox -->
    <foreignObject
        visiblity="{{(card) => card.Type == 'Unit' ? 'visible' : 'hidden'}}"
        x="49" 
        y="690" 
        width="656" 
        height="253"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" style="
            color:white;
            font-family:'Palatino Linotype', serif;
            font-size:32px;
            display:inline;
            line-height:36px
        ">
            <p>
                {{(card, explanations, templates) => {
                    if(card.Text.length == 0) {
                        return '';
                    }
                    
                    let effect = card.Text;
                    
                    // Insert linebreaks.
                    effect = effect.replaceAll(/(?:Whenever|When|[^\s\n.][^\n.]+:)/gm, (part) => {
                        if(effect.startsWith(part)) return part; // No Linebreak in the first line.
                        
                        return `</br>${part}`;
                    });
                    
                    // Choose-One-Effects need a linebreak:
                    effect = effect.replaceAll(/\s-\s/gm, (part) => `</br>${part}`);
                    
                    // Replace all Crystals.
                    const crystalFilters = {
                        "D": "saturate(70%) brightness(0.95) hue-rotate(-60deg)",
                        "E": "hue-rotate(260deg) brightness(1.1) saturate(90%)",
                        "M": "saturate(70%) brightness(90%) hue-rotate(100deg)",
                        "N": "hue-rotate(20deg) saturate(90%)",
                        "V": "saturate(70%) brightness(80%) hue-rotate(172deg)"
                    };
                    
                    Object.entries(crystalFilters).forEach(([key, value]) => {
                        // TODO: Maybe need "padding-bottom:4px;" here.
                        effect = effect.replaceAll(`<${key}>`, `<img
                            width="40"
                            height="40"
                            style="vertical-align:middle;
                                filter: ${value};"
                            src="${templates.get('Crystal_gruen.png')}"
                        />`);
                    });       
                    
                    //Highlight Mechanics
                    Object.entries(explanations).forEach(([key, value]) => {
                        key = key.replaceAll('_', ' ');
                        if(key.length == 0) return;
                        
                        if(effect.length > 0 && effect.toLowerCase().includes(key.toLowerCase())) {
                            let keyword = effect.match(new RegExp(`${key}\\S*`, 'i'));
                            effect = effect.replaceAll(keyword, `<b>${keyword}</b>`);
                        }
                    });
                    return effect;
                }}}
                {{(card, explanations) => {
                    //inject keyword highlights and add flavor text on commons
                    let explanation = '';
                    
                    // Only Commons have explanation texts.
                    if(card.Rarity !== 'Common') return '';
                
                    Object.entries(explanations).forEach(([key, value]) => {
                        key = key.replaceAll('_', ' ');
                        if(key.length == 0 || value == null) return;
                        
                        if((card.Text.length > 0 && card.Text.includes(key)) 
                        || (card.Keyword.length > 0 && card.Keyword.includes(key))) {
                            if(typeof value === 'function') {
                                let parameter = card.Text.match(new RegExp(`(?<=${key}) [^:]+`, 'i'));
                                let parameterv2 = card.Text.match(new RegExp(`(?<=${key}: )[^\\.]+`, 'i'));          
                                
                                explanation = value(parameter || parameterv2);
                            } else {
                                explanation = value;
                            }
                            
                            explanation = `${key}: ${explanation}`
                        }
                    });
                    
                    if(explanation.length > 0) explanation = `<i style="font-size:28px;opacity:0.6;margin-top:-6px">(${explanation})</i>`;
                    
                    return explanation;
                }}}
            </p>
        </div>
    </foreignObject>
    
    <!-- Flavortext -->
    <foreignObject 
            x="46" 
            y="826" 
            width="656" 
            height="140"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" style="
            text-align:center;
            width:100%;
            opacity:0.65;
            position:absolute;
            bottom:10px;
            color:white;
            font-family: 'Palatino Linotype', serif;
            font-size:26px;
            line-height:32px
        ">
            {{(card) => {
                if(card.Flavortext.length == 0) {
                    return '';
                } else {
                    return `<i>&#8222;${card.Flavortext.trim()}&#8220;</i>`;
                }
            }}}
        </div>
    </foreignObject>
                
    <g visiblity="{{(card) => card.Type == 'Unit' ? 'visible' : 'hidden'}}">
        <!-- Power Gem -->
        <!-- Shadow -->
        <image
            x="309"
            y="548"
            width="158"
            height="158"
            preserveAspectRatio="xMidYMid"
            href="{{(card, templates) => templates.get(`Rarity_Uncommon.png`)}}"
            filter="url(#rarityShadow)"
        />
        <!-- Real Render -->
        <image
            x="312"
            y="551"
            width="152"
            height="152"
            preserveAspectRatio="xMidYMid"
            href="{{(card, templates) => templates.get(`Rarity_Uncommon.png`)}}"
        />
        
        <!-- Power -->
        <text
            x="{{(card) => {
                if(card.Power === 4) return '51%';
                if(card.Power === 1) return '49%';
                
                return '52%';
            }}}"
            y="685"
            font-size="185"
            text-anchor="middle"
            filter="drop-shadow(0px 0px 4px black) drop-shadow(0px 0px 4px black)"
            font-family="GRECOromanLubedJudo Medium"
            stroke="black"
            stroke-width="10"
            paint-order="stroke"
            font-weight="bold"
            fill="white"
        >
            <tspan>
                {{(card) => card.Power}}
            </tspan>
        </text>
        
        <!-- Crystals -->
        {{(card, templates) => {
        
            if(card.Costs.length == 0) return '';
            
            const numberQuestionMarks = card.Costs.filter((cost) => cost === '?').length;
            const arrangedCosts = card.Costs.filter((cost) => cost !== '?').reverse();
            for(let i=0;i < numberQuestionMarks; i++) arrangedCosts.push('?');
            
            return arrangedCosts.map((crystal, index) => {
                let filter = '';
                
                switch(crystal.trim().toLowerCase()) {
                    case 'd':
                        filter = 'saturate(70%) brightness(0.95) hue-rotate(-60deg)';
                        break;
                    case 'e':
                        filter = 'hue-rotate(260deg) brightness(1.1) saturate(90%)';
                        break;
                    case 'm':
                        filter = 'saturate(70%) brightness(90%) hue-rotate(100deg)';
                        break;
                    case 'n':
                        filter = 'hue-rotate(20deg) saturate(90%)';
                        break;
                    case 'v':   
                        filter = 'saturate(70%) brightness(80%) hue-rotate(172deg)';
                        break;
                    default:
                        filter = 'grayscale(1)';
                        break;
                }
                
                return `
                <image 
                    x="${715-(index+1)*60}"
                    y="968"
                    width="60"
                    height="60"
                    filter="url(#shadow)"
                    preserveAspectRatio="xMidYMid"
                    href="${templates.get('Crystal_gruen.png')}"
                />
                <image
                    x="${715-(index+1)*60}"
                    y="968"
                    width="60"
                    height="60"
                    style="filter: ${filter};"
                    preserveAspectRatio="xMidYMid"
                    href="${templates.get('Crystal_gruen.png')}"
                />
                `;
            })
            .join('');
        }
        }}
    </g>
    
    <!-- Copyright + Set Name-->
    <foreignObject 
        x="45" 
        y="970" 
        width="655" 
        height="255"
    >
        <div xmlns="http://www.w3.org/1999/xhtml" x="50">
            <div style="
                color:white;
                font-size:20px;
                font-weight:lighter;
                opacity:0.55"
            >
                <b>Beyond</b> Set {{(card) => {
                        if(card.CardID === 0) return '';
                        
                        return `${card.Set}, ${card.Rarity} #${card.CardID}`;
                    }
                    }}<br/>
                &#169; Nonbiri Studios {{() => new Date().getFullYear()}}
            </div>
        </div>
    </foreignObject>
    
    <!-- Black Border + Bleed -->
    <rect
        x="-10"
        y="-10"
        width="770"
        height="1070"
        fill="none"
        stroke="black"
        stroke-width="55"
        rx="35"
        filter="url(#distort)"
    />
</svg>